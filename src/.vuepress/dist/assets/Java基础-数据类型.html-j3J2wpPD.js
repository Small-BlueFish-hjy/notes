import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,d as t}from"./app-_66NPXUO.js";const e={},o=t(`<h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><blockquote><p>Java中有8种基本数据类型：</p><ol><li>6种数字类型：byte、short、int、long、float、double</li><li>1种字符类型：char</li><li>1种布尔型：boolean</li></ol></blockquote><ul><li>它们的默认值和占用的空间</li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td></tr><tr><td>char</td><td>16</td><td>2</td><td>&#39;u0000&#39;</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0f</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0d</td></tr><tr><td>boolean</td><td>1</td><td></td><td>false</td></tr></tbody></table><p>==注：==</p><ol><li><p>对于<code>boolean</code>，官方文档未明确定义，依赖于JVM厂商的具体实现</p></li><li><p><code>long</code>类型的数据需要加上L/l，否则将被作为整型处理</p></li><li><p>char:单引号 String:双引号</p></li></ol><h2 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型" aria-hidden="true">#</a> 包装类型</h2><p>分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code></p><h3 id="_1-基本类型和包装类型的区别" tabindex="-1"><a class="header-anchor" href="#_1-基本类型和包装类型的区别" aria-hidden="true">#</a> 1. 基本类型和包装类型的区别</h3><ul><li><strong>作用</strong>：除了定义一些常量和局部变量，对象属性中很少使用基本类型，并且包装类型可用于泛型</li><li><strong>存储方式</strong>：基本类型的局部变量存放在栈中，基本类型的成员变量（没有被static修饰）存放在Java堆中。包装类型属于对象类型，几乎所有的对象实例存在于堆中</li><li><strong>占用空间</strong>：两者对比，基本类型数据占用的空间往往非常小</li><li><strong>默认值</strong>：包装类型默认值是<code>null</code></li><li><strong>比较方式</strong>：对于基本数据类型来说，== 比较的是值。对于包装数据类型来说，== 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法。</li></ul><h3 id="_2-包装类型的常量池技术" tabindex="-1"><a class="header-anchor" href="#_2-包装类型的常量池技术" aria-hidden="true">#</a> 2. 包装类型的常量池技术</h3><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，<code>Character</code> 创建了数值在[0,127]范围的缓存数据，<code>Boolean</code> 直接返回 True Or False。</p><blockquote><p>Integer i1=40 会发生装箱，等价于 Integer i1=Integer.valueOf(40) 。因此，i1 直接使用的是常量池中的对象。而Integer i2 = new Integer(40) 会直接创建新的对象。两者i1==i2是false</p></blockquote><p><img src="https://blog-img-store1.oss-cn-guangzhou.aliyuncs.com/img/image-20240307213614482.png" alt="image-20240307213614482"></p><h3 id="_3-为什么需要包装类型" tabindex="-1"><a class="header-anchor" href="#_3-为什么需要包装类型" aria-hidden="true">#</a> 3. 为什么需要包装类型</h3><ul><li>有些业务场景，需要某对象的某些属性没有赋值，为null</li><li>泛型参数不能是基本类型【因为基本类型不是<code>Object</code>子类】</li><li>包装类是对象类型，可以调用方法</li></ul><h3 id="_4-基本类型与包装类之间的自动拆装箱" tabindex="-1"><a class="header-anchor" href="#_4-基本类型与包装类之间的自动拆装箱" aria-hidden="true">#</a> 4. 基本类型与包装类之间的自动拆装箱</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//装箱</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其实，装箱就是调用了包装类的<code>valueOf()</code>方法，拆箱就是调用了<code>xxxValue()</code>方法</p><p>因此，上方的代码：</p><p>Integer i = 10，即Integer i = Integer.valueOf(10);</p><p>int j = i，即int j = i.intValue();</p></blockquote><h3 id="_5-自动拆箱引发的npe问题" tabindex="-1"><a class="header-anchor" href="#_5-自动拆箱引发的npe问题" aria-hidden="true">#</a> 5. 自动拆箱引发的NPE问题</h3><p>在《阿里巴巴开发手册》上就有这样的规定：</p><p><img src="https://blog-img-store1.oss-cn-guangzhou.aliyuncs.com/img/image-20240307214411353.png" alt="image-20240307214411353"></p><p><strong>举个例子</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://blog-img-store1.oss-cn-guangzhou.aliyuncs.com/img/image-20240307215159513.png" alt="image-20240307215159513"></p><blockquote><p>这是因为方法getNum()返回的值为<code>null</code>，null无法调用方法</p></blockquote><p><strong>另外一个经典的例子</strong>: 三目运算符使用不当导致NPE异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>flag ? 0 : i 这行代码中，0 是基本数据类型 int，返回数据的时候 i 会被强制拆箱成 int 类型，由于 i 的值是 null，因此就抛出了 NPE 异常。</p></blockquote><p><strong>正确写法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://blog-img-store1.oss-cn-guangzhou.aliyuncs.com/img/image-20240307215924097.png" alt="image-20240307215924097"></p>`,32),l=[o];function p(c,i){return a(),s("div",null,l)}const u=n(e,[["render",p],["__file","Java基础-数据类型.html.vue"]]);export{u as default};
